/*
 * WebApiDBMS
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Table : IEquatable<Table>
    {
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        public Table()
        {
            Name = String.Empty;
            Fields = new List<Field>();
            Records = new List<Record>();
        }
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>

        [DataMember(Name="fields")]
        public List<Field> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Records
        /// </summary>

        [DataMember(Name="records")]
        public List<Record> Records { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public Table(string Name, List<Field> fields, List<Record> records)
        {
            this.Name = Name;
            Fields = fields;
            Records = records;
        }
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Table {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Table)obj);
        }

        /// <summary>
        /// Returns true if Table instances are equal
        /// </summary>
        /// <param name="other">Instance of Table to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Table other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    Records == other.Records ||
                    Records != null &&
                    Records.SequenceEqual(other.Records)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    if (Records != null)
                    hashCode = hashCode * 59 + Records.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Table left, Table right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Table left, Table right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
        public bool EditValue(string newValue, int fieldInd, int recordInd)
        {
            if (!IsValidIndices(fieldInd, recordInd))
            {
                return false;
            }
            if (!Fields[fieldInd].EvaluateType(newValue))
            {
                return false;
            }
            Records[recordInd].ValuesList[fieldInd] = newValue;
            return true;
        }

        public bool AddField(string Name, string TypeName)
        {
            if (Fields == null)
            {
                Fields = new List<Field>();
            }
            foreach (Field field in Fields)
            {
                if (field.Name == Name)
                {
                    return false;
                }
            }
            Fields.Add(new Field { Name = Name, TypeName = TypeName, });
            foreach (Record record in Records)
            {
                record.ValuesList.Add("");
            }
            return true;
        }

        public bool AddRecord()
        {
            if (Fields.Count <= 0)
            {
                return false;
            }

            if (Records.Count < 0)
            {
                return false;
            }

            Records.Add(new Record());
            var fieldsCount = Fields.Count;
            for (int fieldInd = 0; fieldInd < fieldsCount; ++fieldInd)
            {
                Records[Records.Count - 1].ValuesList.Add("");
            }
            return true;
        }

        public bool DeleteRecord(int recordInd)
        {
            if (recordInd < 0 || recordInd >= Records.Count)
            {
                return false;
            }
            Records.RemoveAt(recordInd);
            return true;
        }

        public bool DeleteField(int fieldInd)
        {
            if (fieldInd < 0 || fieldInd >= Fields.Count)
            {
                return false;
            }
            Fields.RemoveAt(fieldInd);
            foreach (Record record in Records)
            {
                record.ValuesList.RemoveAt(fieldInd);
            }
            return false;
        }

        private bool IsValidIndices(int fieldIndex, int recordIndex)
        {
            return fieldIndex >= 0 && fieldIndex < Fields.Count && recordIndex >= 0 && recordIndex < Records.Count;
        }

        public List<Field> GetFields()
        {
            return Fields;
        }

        public List<Record> GetRecords()
        {
            return Records;
        }

        public string GetName()
        {
            return Name;
        }
    }
}
