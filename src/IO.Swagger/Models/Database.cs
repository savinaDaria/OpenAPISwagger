/*
 * WebApiDBMS
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using IO.Swagger.Misc;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Database : IEquatable<Database>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Tables
        /// </summary>

        [DataMember(Name="tables")]
        public List<Table> Tables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Database {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tables: ").Append(Tables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Database)obj);
        }

        /// <summary>
        /// Returns true if Database instances are equal
        /// </summary>
        /// <param name="other">Instance of Database to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Database other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Tables == other.Tables ||
                    Tables != null &&
                    Tables.SequenceEqual(other.Tables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Tables != null)
                    hashCode = hashCode * 59 + Tables.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Database left, Database right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Database left, Database right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators

        public bool AddTable(string Name)
        {
            if (Tables.Count > 0)
            {
                foreach (Table table in Tables)
                {
                    if (table.GetName() == Name)
                    {
                        return false;
                    }
                }
            }
            Tables.Add(new Table { Name = Name });
            return true;
        }

        public bool AddTable(Table newTable)
        {
            if (Tables.Count > 0)
            {
                foreach (Table table in Tables)
                {
                    if (newTable.GetName() == table.GetName())
                    {
                        return false;
                    }
                }
            }
            Tables.Add(newTable);
            return true;
        }


        public Table? GetTable(int index)
        {
            if (!isValidIndex(index))
            {
                return null;
            }
            return Tables[index];
        }

        public bool EditValue(string newValue, int tableInd, int fieldInd, int recordInd)
        {
            if (!isValidIndex(tableInd))
            {
                return false;
            }
            var table = Tables[tableInd];
            return table.EditValue(newValue, fieldInd, recordInd);
        }

        public bool AddField(int tableInd, string Name, string TypeName)
        {
            if (!isValidIndex(tableInd))
            {
                return false;
            }
            var table = Tables[tableInd];
            return table.AddField(Name, TypeName);
        }

        public bool AddRecordToTheTable(int tableInd)
        {
            if (!isValidIndex(tableInd))
            {
                return false;
            }
            Tables[tableInd].AddRecord();
            return true;
        }

        public bool DeleteRecord(int tableInd, int recordInd)
        {
            if (!isValidIndex(tableInd))
            {
                return false;
            }
            var table = Tables[tableInd];
            table.DeleteRecord(recordInd);
            return true;
        }

        public bool DeleteField(int tableInd, int fieldInd)
        {
            if (!isValidIndex(tableInd))
            {
                return false;
            }
            var table = Tables[tableInd];
            table.DeleteField(fieldInd);
            return true;
        }

        public bool DeleteTable(int tableInd)
        {
            if (!isValidIndex(tableInd))
            {
                return false;
            }
            Tables.RemoveAt(tableInd);
            return true;
        }

        public List<string> GetTablesNamesList()
        {
            List<string> tablesNames = new List<string>();
            foreach (Table table in Tables)
            {
                tablesNames.Add(table.GetName());
            }
            return tablesNames;
        }

        public string GetName()
        {
            return Name;
        }

        private bool isValidIndex(int index)
        {
            return index >= 0 || index < Tables.Count;
        }
    }
}
