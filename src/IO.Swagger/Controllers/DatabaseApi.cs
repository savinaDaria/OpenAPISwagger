/*
 * WebApiDBMS
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

using IO.Swagger.Managers;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DatabaseApiController : ControllerBase
    {
        private readonly IDatabaseManager _dbManager;

        public DatabaseApiController(IDatabaseManager dBManager)
        {
            _dbManager = dBManager;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="databaseName"></param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/Database/create")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseCreatePost")]
        public virtual IActionResult DatabaseCreatePost([FromQuery] string databaseName)
        {
            if (!_dbManager.CreateDatabase(databaseName))
            {
                return BadRequest();
            }
            return Ok();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/Database/current")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseCurrentGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Database), description: "Success")]
        public virtual IActionResult DatabaseCurrentGet()
        {
            var database = _dbManager.GetCurrentDatabase();
            if (database == null)
            {
                return NotFound();
            }
            return Ok(database);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="firstTableIndex"></param>
        /// <param name="secondTableIndex"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/Database/Subtract/{firstTableIndex}/{secondTableIndex}")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseSubtractFirstTableIndexSecondTableIndexGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Table), description: "Success")]
        public virtual IActionResult DatabaseSubtractFirstTableIndexSecondTableIndexGet([FromRoute][Required]int? firstTableIndex, [FromRoute][Required]int? secondTableIndex)
        {
            if (!firstTableIndex.HasValue || !secondTableIndex.HasValue)
            {
                return BadRequest();
            }
            var firstTable = _dbManager.GetTable(firstTableIndex.Value);
            if (firstTable == null)
            {
                return BadRequest();
            }
            var secondTable = _dbManager.GetTable(secondTableIndex.Value);
            if (secondTable == null)
            {
                return BadRequest();
            }
            var result = _dbManager.TablesSubtract(firstTable, secondTable);
            if (result == null)
            {
                return BadRequest();
            }
            return Ok(result);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/Database")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Database), description: "Success")]
        public virtual IActionResult DatabaseGet()
        {
            return Ok(new Database());
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="databaseName"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/Database/load/{databaseName}")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseLoadDatabaseNameGet")]
        public virtual IActionResult DatabaseLoadDatabaseNameGet([FromRoute][Required] string databaseName)
        {
            if (!_dbManager.LoadDatabase(databaseName))
            {
                return NotFound();
            }
            return Ok();
        }


        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/Database/save")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseSavePost")]
        public virtual IActionResult DatabaseSavePost()
        {
            if (!_dbManager.SaveCurrentDatabase())
            {
                return BadRequest();
            }
            return Ok();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tableName"></param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/Database/table")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseTablePost")]
        public virtual IActionResult DatabaseTablePost([FromQuery] string tableName)
        {
            if (!_dbManager.AddTable(tableName))
            {
                return BadRequest();
            }
            return CreatedAtAction(nameof(DatabaseTablePost), new { tableName = tableName }, tableName);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="tableIndex"></param>
        /// <response code="200">Success</response>
        [HttpDelete]
        [Route("/Database/table/{tableIndex}")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseTableTableIndexDelete")]
        public virtual IActionResult DatabaseTableTableIndexDelete([FromRoute][Required] int? tableIndex)
        {
            if (!tableIndex.HasValue)
            {
                return BadRequest();
            }
            if (!_dbManager.DeleteTable(tableIndex.Value))
            {
                return BadRequest();
            }
            return NoContent();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <response code="200">Success</response>
        [HttpDelete]
        [Route("/Database/table/{tableIndex}/field/{fieldIndex}")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseTableTableIndexFieldFieldIndexDelete")]
        public virtual IActionResult DatabaseTableTableIndexFieldFieldIndexDelete([FromRoute][Required] int? tableIndex, [FromRoute][Required] int? fieldIndex)
        {
            if (!tableIndex.HasValue || !fieldIndex.HasValue)
            {
                return BadRequest();
            }
            if (!_dbManager.DeleteFieldInTheTable(tableIndex.Value, fieldIndex.Value))
            {
                return BadRequest();
            }
            return NoContent();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="recordIndex"></param>
        /// <param name="value"></param>
        /// <response code="200">Success</response>
        [HttpPut]
        [Route("/Database/table/{tableIndex}/field/{fieldIndex}/record/{recordIndex}")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseTableTableIndexFieldFieldIndexRecordRecordIndexPut")]
        public virtual IActionResult DatabaseTableTableIndexFieldFieldIndexRecordRecordIndexPut([FromRoute][Required] int? tableIndex, [FromRoute][Required] int? fieldIndex, [FromRoute][Required] int? recordIndex, [FromQuery] string value)
        {
            if (!tableIndex.HasValue || !fieldIndex.HasValue || !recordIndex.HasValue)
            {
                return BadRequest();
            }
            var table = _dbManager.GetTable(tableIndex.Value);
            if (table == null)
            {
                return NotFound();
            }
            if (!_dbManager.EditValue(value, tableIndex.Value, fieldIndex.Value, recordIndex.Value))
            {
                return BadRequest();
            }
            return Ok();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tableIndex"></param>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/Database/table/{tableIndex}/field")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseTableTableIndexFieldPost")]
        public virtual IActionResult DatabaseTableTableIndexFieldPost([FromRoute][Required] int? tableIndex, [FromQuery] string name, [FromQuery] string type)
        {
            if (!tableIndex.HasValue)
            {
                return BadRequest();
            }
            var table = _dbManager.GetTable(tableIndex.Value);
            if (table == null)
            {
                return NotFound();
            }
            if (!_dbManager.AddFieldToTheTable(tableIndex.Value, name, type))
            {
                return BadRequest();
            }
            return Ok();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tableIndex"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/Database/table/{tableIndex}")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseTableTableIndexGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Table), description: "Success")]
        public virtual IActionResult DatabaseTableTableIndexGet([FromRoute][Required] int? tableIndex)
        {
            if (!tableIndex.HasValue)
            {
                return BadRequest();
            }
            var table = _dbManager.GetTable(tableIndex.Value);
            if (table == null)
            {
                return NotFound();
            }
            return Ok(table);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tableIndex"></param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/Database/table/{tableIndex}/record")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseTableTableIndexRecordPost")]
        public virtual IActionResult DatabaseTableTableIndexRecordPost([FromRoute][Required] int? tableIndex)
        {
            if (!tableIndex.HasValue)
            {
                return BadRequest();
            }
            var table = _dbManager.GetTable(tableIndex.Value);
            if (table == null)
            {
                return NotFound();
            }
            if (!_dbManager.AddRecordToTheTable(tableIndex.Value))
            {
                return BadRequest();
            }
            return Ok();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tableIndex"></param>
        /// <param name="recordIndex"></param>
        /// <response code="200">Success</response>
        [HttpDelete]
        [Route("/Database/table/{tableIndex}/record/{recordIndex}")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseTableTableIndexRecordRecordIndexDelete")]
        public virtual IActionResult DatabaseTableTableIndexRecordRecordIndexDelete([FromRoute][Required] int? tableIndex, [FromRoute][Required] int? recordIndex)
        {
            if (!tableIndex.HasValue || !recordIndex.HasValue)
            {
                return BadRequest();
            }
            if (!_dbManager.DeleteRecordInTheTable(tableIndex.Value, recordIndex.Value))
            {
                return BadRequest();
            }
            return NoContent();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/Database/tables")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseTablesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Table>), description: "Success")]
        public virtual IActionResult DatabaseTablesGet()
        {
            try
            {
                var tablesList = _dbManager.GetCurrentDatabase().Tables;
                return Ok(tablesList);
            }
            catch (Exception ex)
            {
                return NotFound();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/Database/tables/names")]
        [ValidateModelState]
        [SwaggerOperation("DatabaseTablesNamesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Success")]
        public virtual IActionResult DatabaseTablesNamesGet()
        {
            try
            {
                return Ok(_dbManager.GetTablesNameList());
            }
            catch (Exception ex)
            {
                return NotFound();
            }
        }
    }
}